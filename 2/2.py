# -*- coding: utf-8 -*-
"""2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RW69AswVfF7den79HLTi90-0Lk9YDcKe
"""

import streamlit as st
import matplotlib.pyplot as plt
import numpy as np
from matplotlib.patches import Polygon, Rectangle, Arc

# Konfigurasi halaman
st.set_page_config(
    page_title="Penemuan Teorema Pythagoras",
    page_icon="🔺",
    layout="wide"
)

# CSS kustom untuk tampilan menarik
st.markdown("""
<style>
    .main {
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
    }
    .stApp {
        background: linear-gradient(180deg, #e0f7fa 0%, #b2ebf2 50%, #80deea 100%);
    }
    .header {
        color: #00796b;
        text-align: center;
        padding: 1rem;
        border-radius: 10px;
        background: rgba(255, 255, 255, 0.7);
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }
    .triangle-card {
        background: rgba(255, 255, 255, 0.8);
        border-radius: 15px;
        padding: 20px;
        margin: 10px 0;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }
</style>
""", unsafe_allow_html=True)

# Header aplikasi
st.markdown("""
<div class="header">
    <h1>🔍 Penemuan Teorema Pythagoras</h1>
    <p>Eksplorasi interaktif hubungan sisi-sisi segitiga siku-siku</p>
</div>
""", unsafe_allow_html=True)

# Input untuk sisi segitiga
with st.container():
    st.markdown("### Atur Panjang Sisi Segitiga")
    col1, col2 = st.columns(2)
    a = col1.number_input("Panjang sisi a (alas):", min_value=1.0, value=3.0, step=0.1)
    b = col2.number_input("Panjang sisi b (tinggi):", min_value=1.0, value=4.0, step=0.1)

    # Hitung sisi miring
    c = np.sqrt(a**2 + b**2)

# Visualisasi segitiga
with st.container():
    st.markdown("### Visualisasi Segitiga")
    fig, ax = plt.subplots(figsize=(6, 6))

    # Gambar segitiga
    triangle = Polygon([[0, 0], [a, 0], [0, b]], closed=True,
                      fill=True, color='#4fc3f7', alpha=0.6)
    ax.add_patch(triangle)

    # Gambar sudut siku-siku
    rect = Rectangle((0, 0), min(a,b)/5, min(a,b)/5,
                    fill=True, color='#e53935', alpha=0.7)
    ax.add_patch(rect)

    # Label sisi dan sudut
    ax.text(a/2, -0.3, f'a = {a}', ha='center', fontsize=12)
    ax.text(-0.3, b/2, f'b = {b}', va='center', fontsize=12)
    ax.text(a/3, b/3, f'c = {c:.2f}',
           rotation=np.degrees(np.arctan(b/a))-90,
           ha='center', va='center',
           bbox=dict(facecolor='white', alpha=0.8))

    # Label sudut
    ax.text(0.1, 0.1, '90°', color='white', fontsize=10)
    angle_A = np.degrees(np.arctan(b/a))
    ax.text(a-0.2, 0.2, f'{angle_A:.1f}°', fontsize=10)
    angle_B = 90 - angle_A
    ax.text(0.2, b-0.2, f'{angle_B:.1f}°', fontsize=10)

    ax.set_xlim(-1, a+1)
    ax.set_ylim(-1, b+1)
    ax.axis('equal')
    ax.axis('off')
    st.pyplot(fig)

# Eksplorasi Pythagoras
with st.container():
    st.markdown("### Eksplorasi Hubungan Sisi")
    st.markdown("""
    Coba hitung:
    - a² + b² = ?
    - Bandingkan dengan nilai c²
    """)

    if st.button("Hitung a² + b²"):
        result = a**2 + b**2
        st.markdown(f"**a² + b² = {a}² + {b}² = {a**2} + {b**2} = {result:.2f}**")
        st.markdown(f"**c² = {c:.2f}² = {c**2:.2f}**")
        if abs(result - c**2) < 0.01:
            st.success("Wow! a² + b² ternyata sama dengan c²!")
        else:
            st.warning("Hmm... sepertinya ada yang perlu dicek lagi")

# Hitung sisi yang hilang
with st.container():
    st.markdown("### Temukan Sisi yang Hilang")
    option = st.selectbox(
        "Sisi mana yang ingin kamu cari?",
        ("Sisi miring (c)", "Sisi alas (a)", "Sisi tinggi (b)")
    )

    if option == "Sisi miring (c)":
        a_input = st.number_input("Masukkan panjang sisi a:", min_value=1.0, value=3.0, step=0.1)
        b_input = st.number_input("Masukkan panjang sisi b:", min_value=1.0, value=4.0, step=0.1)
        if st.button("Hitung sisi miring"):
            c_calc = np.sqrt(a_input**2 + b_input**2)
            st.success(f"Panjang sisi miring (c) = √({a_input}² + {b_input}²) = {c_calc:.2f}")

    elif option == "Sisi alas (a)":
        b_input = st.number_input("Masukkan panjang sisi b:", min_value=1.0, value=4.0, step=0.1)
        c_input = st.number_input("Masukkan panjang sisi c:", min_value=1.0, value=5.0, step=0.1)
        if st.button("Hitung sisi alas"):
            if c_input <= b_input:
                st.error("Sisi miring harus lebih panjang dari sisi lainnya!")
            else:
                a_calc = np.sqrt(c_input**2 - b_input**2)
                st.success(f"Panjang sisi alas (a) = √({c_input}² - {b_input}²) = {a_calc:.2f}")

    elif option == "Sisi tinggi (b)":
        a_input = st.number_input("Masukkan panjang sisi a:", min_value=1.0, value=3.0, step=0.1)
        c_input = st.number_input("Masukkan panjang sisi c:", min_value=1.0, value=5.0, step=0.1)
        if st.button("Hitung sisi tinggi"):
            if c_input <= a_input:
                st.error("Sisi miring harus lebih panjang dari sisi lainnya!")
            else:
                b_calc = np.sqrt(c_input**2 - a_input**2)
                st.success(f"Panjang sisi tinggi (b) = √({c_input}² - {a_input}²) = {b_calc:.2f}")

# Catatan untuk siswa
st.markdown("---")
st.markdown("""
**Catatan untuk Siswa:**
- Coba ubah-ubah nilai sisi a dan b, lalu amati hubungan antara ketiga sisi
- Temukan pola yang muncul dari perhitungan a² + b² dan c²
""")