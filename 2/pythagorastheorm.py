# -*- coding: utf-8 -*-
"""pythagorastheorm.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RW69AswVfF7den79HLTi90-0Lk9YDcKe
"""

import streamlit as st
import matplotlib.pyplot as plt
import numpy as np

# Set up the page
st.set_page_config(page_title="Pythagorean Exploration", layout="wide")

# Colorful background
st.markdown("""
<style>
    .stApp {
        background-color: #f0f8ff;
    }
</style>
""", unsafe_allow_html=True)

st.title("ðŸ”º Pythagorean Exploration")

# Input for sides of the triangle
st.markdown("### Adjust the lengths of the triangle sides:")
a = st.number_input("Length of side a (base):", min_value=1.0, value=3.0, step=0.1)
b = st.number_input("Length of side b (height):", min_value=1.0, value=4.0, step=0.1)

# Calculate the hypotenuse
c = np.sqrt(a**2 + b**2)

# Display the triangle
st.markdown("### Visualizing the Right Triangle:")
fig, ax = plt.subplots()
ax.set_xlim(0, a + 2)
ax.set_ylim(0, b + 2)

# Draw the triangle
triangle = plt.Polygon([[0, 0], [a, 0], [0, b]], closed=True, fill=None, edgecolor='blue')
ax.add_patch(triangle)

# Label the sides
ax.text(a / 2, -0.5, f'a = {a:.1f}', ha='center')
ax.text(-0.5, b / 2, f'b = {b:.1f}', va='center')
ax.text(a / 4, b / 4, f'c = {c:.2f}', rotation=45, ha='center')

# Draw right angle indicator
ax.add_patch(plt.Rectangle((0, 0), 0.2, 0.2, fill=True, color='red', alpha=0.5))

# Display angles
angle_A = np.degrees(np.arctan(b / a))
angle_B = 90  # Right angle
angle_C = 90 - angle_A

ax.text(a / 2, 0.5, f'âˆ A = {angle_A:.1f}Â°', ha='center', fontsize=10)
ax.text(-0.5, b / 2, f'âˆ B = {angle_B}Â°', va='center', fontsize=10)
ax.text(a / 4, b + 0.5, f'âˆ C = {angle_C:.1f}Â°', ha='center', fontsize=10)

ax.set_aspect('equal')
ax.axis('off')
st.pyplot(fig)

# Show the result
st.markdown(f"### The length of the hypotenuse (c) is approximately: **{c:.2f}**")

# Concept exploration
st.markdown("### Explore the Pythagorean Relationship:")
st.markdown("Try to find the relationship between the sides of the triangle.")
st.markdown("What happens when you square the lengths of sides a and b?")

# Input for finding missing side
st.markdown("### Find the missing side:")
missing_side = st.selectbox("Select the side you want to find:", ["a", "b", "c"])

if missing_side == "a":
    b_input = st.number_input("Enter the length of side b (height):", min_value=1.0, value=4.0, step=0.1)
    c_input = st.number_input("Enter the length of side c (hypotenuse):", min_value=1.0, value=5.0, step=0.1)
    if st.button("Calculate a"):
        a_calculated = np.sqrt(c_input**2 - b_input**2)
        st.success(f"The length of side a (base) is approximately: **{a_calculated:.2f}**")

elif missing_side == "b":
    a_input = st.number_input("Enter the length of side a (base):", min_value=1.0, value=3.0, step=0.1)
    c_input = st.number_input("Enter the length of side c (hypotenuse):", min_value=1.0, value=5.0, step=0.1)
    if st.button("Calculate b"):
        b_calculated = np.sqrt(c_input**2 - a_input**2)
        st.success(f"The length of side b (height) is approximately: **{b_calculated:.2f}**")

elif missing_side == "c":
    a_input = st.number_input("Enter the length of side a (base):", min_value=1.0, value=3.0, step=0.1)
    b_input = st.number_input("Enter the length of side b (height):", min_value=1.0, value=4.0, step=0.1)
    if st.button("Calculate c"):
        c_calculated = np.sqrt(a_input**2 + b_input**2)
        st.success(f"The length of side c (hypotenuse) is approximately: **{c_calculated:.2f}**")